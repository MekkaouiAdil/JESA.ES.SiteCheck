hydro.data$INVESTMENT_new = NA
for(i in 2:nrow(hydro.data)){
hydro.data$INVESTMENT_new[i] = hydro.data$INVESTMENT[i] -
hydro.data$INVESTMENT[i-1]
}
# New EXPORTS in every year
hydro.data$EXPORTS_new = NA
for(i in 2:nrow(hydro.data)){
hydro.data$EXPORTS_new[i] = hydro.data$EXPORTS[i] -
hydro.data$EXPORTS[i-1]
}
# New PRICE in every year
hydro.data$PRICE_new = NA
for(i in 2:nrow(hydro.data)){
hydro.data$PRICE_new[i] = hydro.data$PRICE[i] -
hydro.data$PRICE[i-1]
}
# Sum of new intertie capacity in preceding 5 years
hydro.data$INTERTIE_5y = NA
for(i in 5:nrow(hydro.data)){
hydro.data$INTERTIE_5y[i] = sum(hydro.data$INTERTIE_new[(i-4):i],na.rm=T)
}
# Sum of new installed capacity in preceding 5 years
hydro.data$INSTALLED_5y = NA
for(i in 5:nrow(hydro.data)){
hydro.data$INSTALLED_5y[i] = sum(hydro.data$INSTALLED_new[(i-4):i],na.rm=T)
}
# Sum of new installed capacity in preceding 5 years lagged by 5 years
hydro.data$INSTALLED_5y_lag_5y = NA
for(i in 10:nrow(hydro.data)){
hydro.data$INSTALLED_5y_lag_5y[i] = hydro.data$INSTALLED_5y[i-5]
}
# Sum of new intertie capacity in preceding 5 years lagged by 5 years
hydro.data$INTERTIE_5y_lag_5y = NA
for(i in 10:nrow(hydro.data)){
hydro.data$INTERTIE_5y_lag_5y[i] = hydro.data$INTERTIE_5y[i-5]
}
# Mean price difference in preceding 5 years
hydro.data$PRICE_5y = NA
for(i in 5:nrow(hydro.data)){
hydro.data$PRICE_5y[i] = mean(hydro.data$PRICE[(i-4):i],na.rm=T)
}
# Sum of PRICE mean in preceding 5 years lagged by 5 years
hydro.data$PRICE_5y_lag_5y = NA
for(i in 10:nrow(hydro.data)){
hydro.data$PRICE_5y_lag_5y[i] = hydro.data$PRICE_5y[i-5]
}
# Mean export in preceding 5 years
hydro.data$EXPORTS_5y = NA
for(i in 5:nrow(hydro.data)){
hydro.data$EXPORTS_5y[i] = mean(hydro.data$EXPORTS[(i-4):i],na.rm=T)
}
# Mean QC demand in preceding 5 years
hydro.data$DEMAND_QC_5y = NA
for(i in 5:nrow(hydro.data)){
hydro.data$DEMAND_QC_5y[i] = mean(hydro.data$DEMAND_QC[(i-4):i],na.rm=T)
}
# Mean QC demand in preceding 5 years lagged by 5 years
hydro.data$DEMAND_QC_5y_lag_5y = NA
for(i in 10:nrow(hydro.data)){
hydro.data$DEMAND_QC_5y_lag_5y[i] = hydro.data$DEMAND_QC_5y[i-5]
}
# Mean US demand in preceding 5 years
hydro.data$DEMAND_US_5y = NA
for(i in 5:nrow(hydro.data)){
hydro.data$DEMAND_US_5y[i] = mean(hydro.data$DEMAND_US[(i-4):i],na.rm=T)
}
# Mean US demand in preceding 5 years lagged by 5 years
hydro.data$DEMAND_US_5y_lag_5y = NA
for(i in 10:nrow(hydro.data)){
hydro.data$DEMAND_US_5y_lag_5y[i] =
hydro.data$DEMAND_US_5y[i-5]
}
# Mean investment in preceding 5 years
hydro.data$INVESTMENT_5y = NA
for(i in 5:nrow(hydro.data)){
hydro.data$INVESTMENT_5y[i] = mean(hydro.data$INVESTMENT[(i-4):i],na.rm=T)
}
# Total investment in preceding 5 years
hydro.data$INVESTMENT_total_5y = NA
for(i in 5:nrow(hydro.data)){
hydro.data$INVESTMENT_total_5y[i] = sum(hydro.data$INVESTMENT[(i-4):i],na.rm=T)
}
}
# Creating _new 5 year averaged and lagged
lag_periods <- c(5)
new_vars <- c("INTERTIE", "INSTALLED", "DEMAND_QC", "DEMAND_US", "INVESTMENT", "EXPORTS", "PRICE")
for (var in new_vars) {
var_new <- paste0(var, "_new")
for (lag_period in lag_periods) {
# moving average
var_avg <- paste0(var_new, "_avg_", lag_period, "y")
hydro.data[[var_avg]] <- zoo::rollapplyr(hydro.data[[var_new]], width = lag_period, FUN = mean, fill = NA)
# lagged average
var_lag_avg <- paste0(var_avg, "_lag_", lag_period, "y")
hydro.data[[var_lag_avg]] <- dplyr::lag(hydro.data[[var_avg]], lag_period)
}
}
# Subset of data with 5-yr avg/lag for everything
vars.exclude.5y = c(1:8,grep("_new$",colnames(hydro.data)))
hydro.data.subset.5y =
hydro.data[,setdiff(1:ncol(hydro.data),
vars.exclude.5y)]
# Ensuring that all variables are numeric
for(i in 1:ncol(hydro.data.subset.5y)){
hydro.data.subset.5y[,i] = as.numeric(hydro.data.subset.5y[,i])
}
# Create new dataframe
df.5y = hydro.data.subset.5y
# Creating new data frames with minimum number of rows cut off
lag.cols.5y = grep("lag",colnames(df.5y))
df.5y.no.lags = df.5y[,setdiff(1:ncol(df.5y),
lag.cols.5y)]
df.5y.rows.to.cut = which(apply(df.5y,1,function(x) sum(is.na(x))>0))
df.5y.no.lags.rows.to.cut = which(apply(df.5y.no.lags,1,function(x) sum(is.na(x))>0))
df.5y.with.lags.no.NA = df.5y[setdiff(1:nrow(df.5y),
df.5y.rows.to.cut),]
# Check for gaussian distribution
significance_level <- 0.05
non_gaussian_5y_lag <- vector("list")
for (var in colnames(df.5y.with.lags.no.NA)) {
# Shapiro-Wilk Test
shapiro_test <- shapiro.test(df.5y.with.lags.no.NA[[var]])
print(paste("Shapiro-Wilk Test for", var, "- p-value:", shapiro_test$p.value))
if (shapiro_test$p.value < significance_level) {
non_gaussian_5y_lag <- c(non_gaussian_5y_lag, var)
}
}
# Box-Cox transformation for the non-gaussian variables and rechecking the gaussian distribution
result_5y_lag <- transform_and_test(df.5y.with.lags.no.NA, non_gaussian_5y_lag)
df.5y.with.lags.no.NA <- result_5y_lag$df
still_non_gaussian_5y_lag <- result_5y_lag$still_non_gaussian
# We manually revert this var from box-cox transform to maintain consistancy with Price_5y var that was transfored by box-cox
bc <- boxcox(df.5y.with.lags.no.NA$PRICE_5y_lag_5y ~ 1, plotit = FALSE)
lambda <- bc$x[which.max(bc$y)]
df.5y.with.lags.no.NA$PRICE_5y_lag_5y <- (df.5y.with.lags.no.NA$PRICE_5y_lag_5y^lambda - 1) / lambda
## Discretising remaining variables that have significant SW test results or are zero-inflated
df.5y.with.lags.no.NA$INTERTIE_5y <- cut(df.5y.with.lags.no.NA$INTERTIE_5y , breaks = c(min(df.5y.with.lags.no.NA$INTERTIE_5y,na.rm=T ), 100, max(df.5y.with.lags.no.NA$INTERTIE_5y,na.rm=T )), labels = c("non-significant", "significant"), include.lowest = TRUE, ordered_result = TRUE)
df.5y.with.lags.no.NA$INTERTIE_5y_lag_5y <- cut(df.5y.with.lags.no.NA$INTERTIE_5y_lag_5y , breaks = c(min(df.5y.with.lags.no.NA$INTERTIE_5y_lag_5y,na.rm=T ), 100, max(df.5y.with.lags.no.NA$INTERTIE_5y_lag_5y,na.rm=T )), labels = c("non-significant", "significant"), include.lowest = TRUE, ordered_result = TRUE)
df.5y.with.lags.no.NA$DEMAND_QC_5y <- cut(df.5y.with.lags.no.NA$DEMAND_QC_5y, breaks = c(min(df.5y.with.lags.no.NA$DEMAND_QC_5y,na.rm=T), 120, 160, max(df.5y.with.lags.no.NA$DEMAND_QC_5y,na.rm=T)), labels = c("low", "medium", "high"), include.lowest = TRUE, ordered_result = TRUE)
df.5y.with.lags.no.NA$DEMAND_US_5y <- cut(df.5y.with.lags.no.NA$DEMAND_US_5y, breaks = c(min(df.5y.with.lags.no.NA$DEMAND_US_5y,na.rm=T), 230, 260, max(df.5y.with.lags.no.NA$DEMAND_US_5y,na.rm=T)), labels = c("low", "medium", "high"), include.lowest = TRUE, ordered_result = TRUE)
df.5y.with.lags.no.NA$INVESTMENT_5y <- cut(df.5y.with.lags.no.NA$INVESTMENT_5y, breaks = c(min(df.5y.with.lags.no.NA$INVESTMENT_5y,na.rm=T), 2500, 3500, max(df.5y.with.lags.no.NA$INVESTMENT_5y,na.rm=T)), labels = c("low", "medium", "high"), include.lowest = TRUE, ordered_result = TRUE)
df.5y.with.lags.no.NA$EXPORTS_new_avg_5y_lag_5y <- cut(df.5y.with.lags.no.NA$EXPORTS_new_avg_5y_lag_5y, breaks = c(min(df.5y.with.lags.no.NA$EXPORTS_new_avg_5y_lag_5y,na.rm=T), 0, max(df.5y.with.lags.no.NA$EXPORTS_new_avg_5y_lag_5y,na.rm=T)), labels = c("negative", "positive"), include.lowest = TRUE, ordered_result = TRUE)
# We manually revert this var from box-cox transform due to its histogram
df.5y.with.lags.no.NA$INSTALLED_5y_lag_5y = hydro.data$INSTALLED_5y_lag_5y[11:nrow(hydro.data)]
df.5y.with.lags.no.NA$INSTALLED_5y_lag_5y <- cut(df.5y.with.lags.no.NA$INSTALLED_5y_lag_5y , breaks = c(min(df.5y.with.lags.no.NA$INSTALLED_5y_lag_5y,na.rm=T ), 2000, 4000, max(df.5y.with.lags.no.NA$INSTALLED_5y_lag_5y,na.rm=T )), labels = c("low", "medium", "high"), include.lowest = TRUE, ordered_result = TRUE)
# Selecting columns of interest
selected.columns <- c('INSTALLED_5y_lag_5y', 'INSTALLED_5y', 'DEMAND_QC_new_avg_5y_lag_5y', 'INVESTMENT_5y', 'PRICE_5y_lag_5y',
'INTERTIE_5y_lag_5y', 'INTERTIE_5y', 'DEMAND_US_new_avg_5y_lag_5y', 'PRICE_5y',
'EXPORTS_new_avg_5y_lag_5y', 'EXPORTS_5y', 'DEMAND_QC_5y', 'DEMAND_US_5y')
# Subsetting the dataframe and creating the final dataframe
df.expert.5y <- df.5y.with.lags.no.NA[, selected.columns]
## Creating the expert blacklist
# The allow list is initialized with specific variable pairs.
allow.list.expert =
data.frame(matrix(c(
# Investment --> Installed
"INVESTMENT_5y","INSTALLED_5y",
# Installed --> Exports
"INSTALLED_5y","EXPORTS_5y",
# QC demand lag --> Installed
"DEMAND_QC_new_avg_5y_lag_5y","INSTALLED_5y",
# Price lag --> Installed
"PRICE_5y_lag_5y","INSTALLED_5y",
# Intertie lag --> Installed
"INTERTIE_5y_lag_5y","INSTALLED_5y",
# Installed --> Intertie
#  "INSTALLED_5y","INTERTIE_5y",
"INSTALLED_5y_lag_5y", "INTERTIE_5y",
# Investment --> Intertie
"INVESTMENT_5y","INTERTIE_5y",
# US demand lag --> Intertie
"DEMAND_US_new_avg_5y_lag_5y","INTERTIE_5y",
# Price lag --> Intertie
"PRICE_5y_lag_5y","INTERTIE_5y",
# QC demand lag --> Investment
"DEMAND_QC_new_avg_5y_lag_5y","INVESTMENT_5y",
# QC demand --> Price
"DEMAND_QC_5y","PRICE_5y",
# Exports lag --> Investment
"EXPORTS_new_avg_5y_lag_5y","INVESTMENT_5y",
# Intertie --> Exports
"INTERTIE_5y","EXPORTS_5y",
# Price --> Exports
"PRICE_5y","EXPORTS_5y",
# US demand --> Price
"DEMAND_US_5y","PRICE_5y"),
ncol = 2,byrow=TRUE))
# Column names for the allow list are assigned.
colnames(allow.list.expert) = c("From","To")
# The black list is initialized with a placeholder value.
black.list.expert = NA
# For each pair of variables in the final data-frame, a check is performed.
# If the pair is not found in the allow list, it is added to the black list.
for(i in 1:ncol(df.expert.5y)){
for(j in 1:ncol(df.expert.5y)){
from.test = colnames(df.expert.5y)[i]
to.test = colnames(df.expert.5y)[j]
if(length(which(allow.list.expert$From==from.test&
allow.list.expert$To==to.test))==0){
black.list.expert =
rbind(black.list.expert,c(from.test,to.test))
}
}
}
# Column names for the black list are assigned.
colnames(black.list.expert) = c("From","To")
# The placeholder value in the black list is removed.
black.list.expert = black.list.expert[2:nrow(black.list.expert),]
## Visualizing the expert DAG
# A DAG is constructed using expert knowledge.
dag.expert.5y <- model2network("[INSTALLED_5y_lag_5y][DEMAND_QC_new_avg_5y_lag_5y][PRICE_5y_lag_5y][INTERTIE_5y_lag_5y][DEMAND_US_new_avg_5y_lag_5y][EXPORTS_new_avg_5y_lag_5y][DEMAND_QC_5y][DEMAND_US_5y][INSTALLED_5y|DEMAND_QC_new_avg_5y_lag_5y:INVESTMENT_5y:PRICE_5y_lag_5y:INTERTIE_5y_lag_5y][INTERTIE_5y|INSTALLED_5y_lag_5y:INVESTMENT_5y:DEMAND_US_new_avg_5y_lag_5y:PRICE_5y_lag_5y][INVESTMENT_5y|DEMAND_QC_new_avg_5y_lag_5y:EXPORTS_new_avg_5y_lag_5y][EXPORTS_5y|INTERTIE_5y:INSTALLED_5y:PRICE_5y][PRICE_5y|DEMAND_QC_5y:DEMAND_US_5y]")
# The constructed DAG is visualized with a specified height.
plot.network(dag.expert.5y, ht = "600px")
## Creating Score-Based DAGs
# DAG created using the loglik-cg score function and HC algorithm
dag.expert.5y.emp <- hc(df.expert.5y, score = "loglik-cg", blacklist = black.list.expert, debug = FALSE)
par(mar=c(1,1,1,1))
# Fitting the model
model.expert.5y.emp = bn.fit(dag.expert.5y.emp, df.expert.5y)
#Visualizing model's conditional probabilities using the graphviz.chart
graphviz.chart(model.expert.5y.emp,  type = "barprob", grid = TRUE, bar.col = "darkgreen",
strip.bg = "lightskyblue")
dev.off()
# Network visualized using plot.network
plot.network(dag.expert.5y.emp, ht = "600px")
# DAG created using the aic-cg score function and HC algorithm
dag.expert.5y.emp.aic <- hc(df.expert.5y, score = "aic-cg", blacklist = black.list.expert)
plot.network(dag.expert.5y.emp.aic, ht = "600px")
par(mar=c(1,1,1,1))
model.expert.5y.emp.aic = bn.fit(dag.expert.5y.emp.aic, df.expert.5y)
graphviz.chart(model.expert.5y.emp.aic,  type = "barprob", grid = TRUE, bar.col = "darkgreen",
strip.bg = "lightskyblue")
dev.off()
# DAG created using the bic-cg score function and HC algorithm
dag.expert.5y.emp.bic <- hc(df.expert.5y, score = "bic-cg", blacklist = black.list.expert)
plot.network(dag.expert.5y.emp.bic, ht = "600px")
par(mar=c(1,1,1,1))
model.expert.5y.emp.bic = bn.fit(dag.expert.5y.emp.bic, df.expert.5y)
graphviz.chart(model.expert.5y.emp.bic,  type = "barprob", grid = TRUE, bar.col = "darkgreen",
strip.bg = "lightskyblue")
dev.off()
# Run the Graph_Generator code to save the conditional depenency graphs automatically
source("Graph_Generator.R")
source("R files/Graph_Generator.R")
source("/Users/amirgazar/Documents/GitHub/Hydro EIA Code/R files/Graph_Generator.R")
## MUST RUN THE Hydro_Paper_BNLearn latest version first!!!
setwd("/Users/amirgazar/Documents/GitHub/Hydro EIA Code/figs")
# Set the theme for all plots
theme_set(theme_minimal(base_family = "Times New Roman") +
theme(axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"),
axis.ticks = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank()))
palette <- c("black", "darkgray", "gray", "lightgray")
# 1. Conditional density
df.expert.5y$INSTALLED_5y_pred = predict(model.expert.5y.emp, node = "INSTALLED_5y", data = df.expert.5y, method = "bayes-lw")
split_data <- split(df.expert.5y, df.expert.5y$INVESTMENT_5y)
long_data <- bind_rows(split_data, .id = "group")
n <- length(split_data)
colors <- gray(seq(0, 1, length.out = n))
p <- ggplot(long_data, aes(x = DEMAND_QC_new_avg_5y_lag_5y,
y = PRICE_5y_lag_5y,
size = INSTALLED_5y_pred,
color = group)) +
geom_point(shape = 16) +  # Using shape 16, which is a circle
labs(x = "DEMAND_QC", y = "PRICE", size = "Predicted INSTALLED", color = "INVESTMENT") +
scale_color_manual(values = colors)
ggsave(filename = "SI_Figure_S5.svg", plot = p, device = "svg")
# 2. Conditional probability table
EXPORTS_new_avg_5y_lag_5y <- list(
negative = c(0.0000000, 0.3636364, 0.6363636),
positive = c(0.3636364, 0.2272727, 0.4090909)
)
investment_levels <- c('low', 'medium', 'high')
df <- data.frame(
EXPORTS_new_avg_5y_lag_5y = rep(names(EXPORTS_new_avg_5y_lag_5y), each = length(investment_levels)),
INVESTMENT_5y = rep(investment_levels, times = length(EXPORTS_new_avg_5y_lag_5y)),
Probability = c(EXPORTS_new_avg_5y_lag_5y$negative, EXPORTS_new_avg_5y_lag_5y$positive)
)
plot_list <- list()
for (level in names(EXPORTS_new_avg_5y_lag_5y)) {
pie_data <- df[df$EXPORTS_new_avg_5y_lag_5y == level,]
p <- ggplot(pie_data, aes(x = "", y = Probability, fill = INVESTMENT_5y)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
scale_fill_manual(values = palette) +
labs(fill = "INVESTMENT") +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line = element_blank()
)
plot_list[[level]] <- p
}
ggsave(filename = "SI_Figure_S6.svg", plot = plot_list[[1]], device = "svg")
ggsave(filename = "SI_Figure_S7.svg", plot = plot_list[[2]], device = "svg")
# 3. Conditional probability table
data <- data.frame(
INVESTMENT_5y = c(rep('low', 6), rep('medium', 6), rep('high', 6)),
INSTALLED_5y_lag_5y = rep(c('low', 'medium', 'high'), 6)[1:18],
INTERTIE_5y = rep(rep(c('non-significant', 'significant'), each = 3), 4)[1:18],
value = c(1, 1, 0.6, 0, 0, 0.4,
1, 0.5, 0.67, 0, 0.5, 0.33,
0.63, 0.63,0, 0.38, 0.38,0)
)
data$INSTALLED_5y_lag_5y <- factor(data$INSTALLED_5y_lag_5y, levels = c("low", "medium", "high"), ordered = TRUE)
data$INVESTMENT_5y <- factor(data$INVESTMENT_5y, levels = c("low", "medium", "high"), ordered = TRUE)
p<- ggplot(data, aes(x = INSTALLED_5y_lag_5y, y = value, fill = INTERTIE_5y)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~INVESTMENT_5y, nrow = 1) +
labs(y = "Probability", x = "INSTALLED", fill = "INTERTIE") +
scale_fill_manual(values = palette)
ggsave(filename = "fig_4.svg", plot = p, device = "svg")
# 4. Conditional density
intercepts <- c(0.06873333, 0.10085000, 0.11086667)
std_devs <- c(0.004001666, 0.025626283, 0.021735956)
labels <- c("low", "medium", "high")
x <- seq(0, 0.2, length.out = 1000)
data <- data.frame()
for (i in 1:3) {
y <- dnorm(x, mean = intercepts[i], sd = std_devs[i])
temp_data <- data.frame(PRICE_5y = x, Probability_Density = y, DEMAND_US_5y = labels[i])
data <- rbind(data, temp_data)
}
p <- ggplot(data, aes(x = PRICE_5y, y = Probability_Density, color = DEMAND_US_5y)) +
geom_line() +
labs(x = "PRICE",
y = "Probability Density", color = "DEMAND_US") +
scale_color_manual(values = c("black", "darkblue", "lightgray"))
ggsave(filename = "fig_5.svg", plot = p, device = "svg")
# 5. Conditional density
df.expert.5y$EXPORTS_5y_pred = predict(model.expert.5y.emp, node = "EXPORTS_5y", data = df.expert.5y, method = "bayes-lw")
p<- ggplot(df.expert.5y, aes(x = PRICE_5y, y = INSTALLED_5y, size = EXPORTS_5y_pred, color = as.factor(INTERTIE_5y))) +
geom_point() +
labs(x = "PRICE",
y = "INSTALLED",
size = "Predicted EXPORTS",
color = "INTERTIE") +
scale_color_manual(values = c("black", "darkgray", "lightgray"))
ggsave(filename = "fig_6.svg", plot = p, device = "svg")
# BIC Model Results
# 1. INTERTIE | DEMAND, INSTALLED
data <- data.frame(
INTERTIE = c(0, 1),
Intercept = c(42.667839, 28.176351),
DEMAND_QC_new_avg_5y_lag_5y = c(4.008358, 6.429567)
)
x_values <- seq(from = -2.5, to = 7.5, length.out = 100)
y_values_0 <- data$Intercept[1] + data$DEMAND_QC_new_avg_5y_lag_5y[1] * x_values
y_values_1 <- data$Intercept[2] + data$DEMAND_QC_new_avg_5y_lag_5y[2] * x_values
line_data <- data.frame(
x = c(x_values, x_values),
y = c(y_values_0, y_values_1),
line = factor(rep(c("non-significant", "significant"), each = 100))
)
palette <- c("non-significant" = "grey", "significant" = "black")
plot <- ggplot(line_data, aes(x = x, y = y, color = line)) +
geom_line() +
geom_point(data = df.expert.5y, aes(x = DEMAND_QC_new_avg_5y_lag_5y, y = INSTALLED_5y, color = INTERTIE_5y)) +
labs(x = "DEMAND_QC", y = "INSTALLED") +
scale_color_manual(name = "INTERTIE", values = palette) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
axis.ticks.length = unit(0.2, "cm"),
axis.ticks = element_line(colour = "black"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggsave(filename = "fig_7.svg", plot = plot, device = "svg")
## MUST RUN THE Hydro_Paper_BNLearn latest version first!!!
setwd("/Users/amirgazar/Documents/GitHub/Hydro EIA Code/figs")
# Set the theme for all plots
theme_set(theme_minimal(base_family = "Times New Roman") +
theme(axis.text = element_text(color = "black"),
axis.line = element_line(color = "black"),
axis.ticks.length = unit(0.2, "cm"),
axis.ticks = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_blank()))
palette <- c("black", "darkgray", "gray", "lightgray")
# 1. Conditional density
df.expert.5y$INSTALLED_5y_pred = predict(model.expert.5y.emp, node = "INSTALLED_5y", data = df.expert.5y, method = "bayes-lw")
split_data <- split(df.expert.5y, df.expert.5y$INVESTMENT_5y)
long_data <- bind_rows(split_data, .id = "group")
n <- length(split_data)
colors <- gray(seq(0, 1, length.out = n))
p <- ggplot(long_data, aes(x = DEMAND_QC_new_avg_5y_lag_5y,
y = PRICE_5y_lag_5y,
size = INSTALLED_5y_pred,
color = group)) +
geom_point(shape = 16) +  # Using shape 16, which is a circle
labs(x = "DEMAND_QC", y = "PRICE", size = "Predicted INSTALLED", color = "INVESTMENT") +
scale_color_manual(values = colors)
ggsave(filename = "SI_Figure_S5.svg", plot = p, device = "svg")
# 2. Conditional probability table
EXPORTS_new_avg_5y_lag_5y <- list(
negative = c(0.0000000, 0.3636364, 0.6363636),
positive = c(0.3636364, 0.2272727, 0.4090909)
)
investment_levels <- c('low', 'medium', 'high')
df <- data.frame(
EXPORTS_new_avg_5y_lag_5y = rep(names(EXPORTS_new_avg_5y_lag_5y), each = length(investment_levels)),
INVESTMENT_5y = rep(investment_levels, times = length(EXPORTS_new_avg_5y_lag_5y)),
Probability = c(EXPORTS_new_avg_5y_lag_5y$negative, EXPORTS_new_avg_5y_lag_5y$positive)
)
plot_list <- list()
for (level in names(EXPORTS_new_avg_5y_lag_5y)) {
pie_data <- df[df$EXPORTS_new_avg_5y_lag_5y == level,]
p <- ggplot(pie_data, aes(x = "", y = Probability, fill = INVESTMENT_5y)) +
geom_bar(width = 1, stat = "identity") +
coord_polar(theta = "y") +
scale_fill_manual(values = palette) +
labs(fill = "INVESTMENT") +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line = element_blank()
)
plot_list[[level]] <- p
}
ggsave(filename = "SI_Figure_S8A.svg", plot = plot_list[[1]], device = "svg")
ggsave(filename = "SI_Figure_S8B.svg", plot = plot_list[[2]], device = "svg")
# 3. Conditional probability table
data <- data.frame(
INVESTMENT_5y = c(rep('low', 6), rep('medium', 6), rep('high', 6)),
INSTALLED_5y_lag_5y = rep(c('low', 'medium', 'high'), 6)[1:18],
INTERTIE_5y = rep(rep(c('non-significant', 'significant'), each = 3), 4)[1:18],
value = c(1, 1, 0.6, 0, 0, 0.4,
1, 0.5, 0.67, 0, 0.5, 0.33,
0.63, 0.63,0, 0.38, 0.38,0)
)
data$INSTALLED_5y_lag_5y <- factor(data$INSTALLED_5y_lag_5y, levels = c("low", "medium", "high"), ordered = TRUE)
data$INVESTMENT_5y <- factor(data$INVESTMENT_5y, levels = c("low", "medium", "high"), ordered = TRUE)
p<- ggplot(data, aes(x = INSTALLED_5y_lag_5y, y = value, fill = INTERTIE_5y)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~INVESTMENT_5y, nrow = 1) +
labs(y = "Probability", x = "INSTALLED", fill = "INTERTIE") +
scale_fill_manual(values = palette)
ggsave(filename = "SI_Figure_S6.svg", plot = p, device = "svg")
# 4. Conditional density
intercepts <- c(0.06873333, 0.10085000, 0.11086667)
std_devs <- c(0.004001666, 0.025626283, 0.021735956)
labels <- c("low", "medium", "high")
x <- seq(0, 0.2, length.out = 1000)
data <- data.frame()
for (i in 1:3) {
y <- dnorm(x, mean = intercepts[i], sd = std_devs[i])
temp_data <- data.frame(PRICE_5y = x, Probability_Density = y, DEMAND_US_5y = labels[i])
data <- rbind(data, temp_data)
}
p <- ggplot(data, aes(x = PRICE_5y, y = Probability_Density, color = DEMAND_US_5y)) +
geom_line() +
labs(x = "PRICE",
y = "Probability Density", color = "DEMAND_US") +
scale_color_manual(values = c("black", "darkblue", "lightgray"))
ggsave(filename = "SI_Figure_S7.svg", plot = p, device = "svg")
# 5. Conditional density
df.expert.5y$EXPORTS_5y_pred = predict(model.expert.5y.emp, node = "EXPORTS_5y", data = df.expert.5y, method = "bayes-lw")
p<- ggplot(df.expert.5y, aes(x = PRICE_5y, y = INSTALLED_5y, size = EXPORTS_5y_pred, color = as.factor(INTERTIE_5y))) +
geom_point() +
labs(x = "PRICE",
y = "INSTALLED",
size = "Predicted EXPORTS",
color = "INTERTIE") +
scale_color_manual(values = c("black", "darkgray", "lightgray"))
ggsave(filename = "SI_Figure_S9.svg", plot = p, device = "svg")
# BIC Model Results
# 1. INTERTIE | DEMAND, INSTALLED
data <- data.frame(
INTERTIE = c(0, 1),
Intercept = c(42.667839, 28.176351),
DEMAND_QC_new_avg_5y_lag_5y = c(4.008358, 6.429567)
)
x_values <- seq(from = -2.5, to = 7.5, length.out = 100)
y_values_0 <- data$Intercept[1] + data$DEMAND_QC_new_avg_5y_lag_5y[1] * x_values
y_values_1 <- data$Intercept[2] + data$DEMAND_QC_new_avg_5y_lag_5y[2] * x_values
line_data <- data.frame(
x = c(x_values, x_values),
y = c(y_values_0, y_values_1),
line = factor(rep(c("non-significant", "significant"), each = 100))
)
palette <- c("non-significant" = "grey", "significant" = "black")
plot <- ggplot(line_data, aes(x = x, y = y, color = line)) +
geom_line() +
geom_point(data = df.expert.5y, aes(x = DEMAND_QC_new_avg_5y_lag_5y, y = INSTALLED_5y, color = INTERTIE_5y)) +
labs(x = "DEMAND_QC", y = "INSTALLED") +
scale_color_manual(name = "INTERTIE", values = palette) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
axis.ticks.length = unit(0.2, "cm"),
axis.ticks = element_line(colour = "black"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggsave(filename = "SI_Figure_S10.svg", plot = plot, device = "svg")
